<!DOCTYPE html>
<html>
<meta charset="utf-8" />

<head>
  <title>Espirgbani</title>
  <link rel="stylesheet" type="text/css" href="style.css">
  <script src="ansi_up.js"></script>
</head>

<body>

<div style="text-align: center; margin-bottom: 32px;">
  <h1 id=host_name>üï∞Ô∏è Espirgbani üï∞Ô∏è</h1>
  <p><i>The ESP32 Pinball RGB Animation clock</i></p>
  <p><b>WS: <span id=connected_status>‚ùå</span>, HEAP: <span id=heap_status></span></b></p>
  <div>
    <button onclick="tab('console_tab');">Console</button>
    <button onclick="tab('settings_tab');">Settings</button>
  </div>
</div>

<div class="tab" id="console_tab">
  <div class="shell-wrap">
    <ul class="shell-body", id="output"></ul>
  </div>
</div>

<div class="tab" id="settings_tab">
  <textarea id="myTextArea" class="shell-body" onkeyup="bnApply.disabled=true; tStatus.innerText='';"></textarea>
  <br>
  <button id="bnVerify" class="inline" onclick="prettyPrint();">Verify</button>
  <button id="bnApply" class="inline" onclick="writeFile();">Apply</button>
  <button id="bnReboot" class="inline" onclick="websocket.send('r'); textArea.value = ''; window.location.reload(false);">Reboot</button>
  <span id="tStatus"></span>
</div>

</body>

<script language="javascript" type="text/javascript">
  var websocket;

  var host = "espirgbani.local";
  if (window.location.host != "")
    host = window.location.host;
  var wsUri = "ws://" + host + "/ws";

  // --------------------------------
  //  For the console tab
  // --------------------------------
  var ansi_up = new AnsiUp;
  var isScroll = true;
  var reader = new FileReader();

  // --------------------------------
  //  For the settings tab
  // --------------------------------
  var textArea = document.getElementById("myTextArea");
  // enable TAB input in textArea
  textArea.onkeydown = function(e) {
    if (e.keyCode == 9 || e.which == 9) {
        e.preventDefault();
        var s = this.selectionStart;
        this.value = this.value.substring(0, this.selectionStart) + "    " + this.value.substring(this.selectionEnd);
        this.selectionEnd = s + 4;
    }
  }

  var bnApply = document.getElementById("bnApply");
  var tStatus = document.getElementById("tStatus");
  bnApply.disabled = true;
  var isWriting = false;

  // Add a line to the console window
  function writeToConsole(message) {
    if (message.length <= 0)
      return;
    console.log('writing: ' + message);
    output = document.getElementById("output");
    var pre = document.createElement("li");
    var html = ansi_up.ansi_to_html(message);
    pre.innerHTML = html;
    output.appendChild(pre);
    if (isScroll) {
      window.scrollBy(0, 100);
    }
  }

  function init() {
    let intervalId;
    let log_leftover = "";

    websocket = new WebSocket(wsUri);
    websocket.binaryType = 'arraybuffer';

    websocket.onopen = function(evt) {
      connected_status.innerHTML = "‚åö";
      writeToConsole("WS CONNECTED");

      // dump complete log buffer
      websocket.send('a1');

      intervalId = setInterval(function() {
        // get heap command
        websocket.send("h");
        // dump log updates
        websocket.send('a0');
      }, 1000);
    };

    websocket.onclose = function(evt) {
      clearInterval(intervalId);
      intervalId = null;

      connected_status.innerHTML = "‚ùå";
      writeToConsole("WS DISCONNECTED");
    };

    websocket.onmessage = function(evt) {
      dat = evt.data;

      console.log("dat: " + dat);

      if(typeof(dat) != "string") {
        dec = new TextDecoder("utf-8");
        dat = dec.decode(dat);
      }

      if (dat[0] == 'a') {
        let temp_str = log_leftover;
        temp_str += dat.substr(1).replace(/\0/g, '').replace("\r","");
        temp_lines = temp_str.split("\n");
        log_leftover = temp_lines.pop();
        temp_lines.forEach(writeToConsole);
      } else if (dat[0] == 'h') {
        temp = JSON.parse(dat.substr(1));
        connected_status.innerHTML = "‚úÖ";
        heap_status.innerHTML = `${temp['min_heap']}, ${temp['heap']}`;
      } else if (dat[0] == '{') {
        textArea.value = dat;
        prettyPrint();
        if (isWriting) {
          tStatus.innerHTML = "<font color=#44FF44>üëç applied üëç</font>";
        }
      }
    };

    websocket.onerror = function(evt) {
      connected_status.innerHTML = "üî• " + evt.data;
      writeToConsole('ERROR: ' + evt.data);
    };

    window.onscroll = function() {
      var d = document.documentElement;
      isScroll = d.scrollTop + window.innerHeight === d.offsetHeight;
    };

    tab("console_tab");
  }

  // Switch tabs to the one with name `n`
  function tab(n) {
    var x = document.getElementsByClassName("tab");
    for (i = 0; i < x.length; i++) {
      x[i].style.display = "none";
    }
    document.getElementById(n).style.display = "block";

    if (n == 'settings_tab')
      // dump current settings file
      websocket.send('b');
  }

  // --------------------------------
  //  For the settings tab
  // --------------------------------
  function writeFile() {
    // bnApply.disabled = true;
    var tmp = "b" + textArea.value;
    console.log("Sending", tmp);
    websocket.send(tmp);
    isWriting = true;
    textArea.value = "";
    tStatus.innerHTML = "<font color=#444444>applying ...</font>";
  }

  function prettyPrint() {
      s = textArea.value;
      try {
        var obj = JSON.parse(s);
        textArea.value = JSON.stringify(obj, undefined, 4);
        bnApply.disabled = false;
        tStatus.innerHTML = "<font color=#44FF44>verified</font>";
      } catch(e) {
        bnApply.disabled = true;
        var arr = e.message.match(/\d+/g);
        var row = parseInt(arr[0]);
        var col = parseInt(arr[1]);
        console.log('.json error at row / col: ', row, col);

        arr = textArea.value.split('\n');
        var startChar = 0;
        for (var i=0; i < row - 1; i++)
          startChar += arr[i].length + 1;
        startChar += col;

        textArea.focus();
        textArea.selectionStart = startChar;
        textArea.selectionEnd = startChar;
        tStatus.innerHTML = "<font color=#FF4444>" + e.message + "</font>";
      }
  }

  window.onload = init;
</script>
</html>
