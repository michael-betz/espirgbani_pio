<!DOCTYPE html>
<html>
<meta charset="utf-8" />

<head>
  <title>Espirgbani</title>
  <link rel="stylesheet" type="text/css" href="style.css">
  <script src="ansi_up.js"></script>
</head>

<body>

<div style="text-align: center; margin-bottom: 32px;">
  <h1 id=host_name>üï∞Ô∏è Espirgbani üï∞Ô∏è</h1>
  <p><i>The ESP32 Pinball RGB Animation clock</i></p>
  <p><b>WS: <span id=connected_status>‚ùå</span>, HEAP: <span id=heap_status></span></b></p>
  <div>
    <button onclick="tab('console_tab');">Console</button>
    <button onclick="tab('settings_tab');">Settings</button>
  </div>
</div>

<div class="tab" id="console_tab">
  <div class="shell-wrap">
    <ul class="shell-body", id="output"></ul>
  </div>
</div>

<div class="tab" id="settings_tab">
  <textarea id="myTextArea" class="shell-body" onkeyup="bnA.disabled=true; tStat.innerText='';"></textarea>
  <br>
  <button id="bnV" class="inline" onclick="prettyPrint();">Verify</button>
  <button id="bnA" class="inline" onclick="writeFile();">Apply</button>
  <button id="bnR" class="inline" onclick="websocket.send('r'); textArea.value = ''; window.location.reload(false);">Reboot</button>
  <span id="tStat"></span>
</div>

</body>

<script language="javascript" type="text/javascript">
  var wsUri = "ws://" + window.location.host + "/ws";
  var websocket;

  // --------------------------------
  //  For the console tab
  // --------------------------------
  var ansi_up = new AnsiUp;
  var isScroll = true;
  var reader = new FileReader();

  // --------------------------------
  //  For the settings tab
  // --------------------------------
  textArea = document.getElementById("myTextArea");
  bnA = document.getElementById("bnA");
  tStat = document.getElementById("tStat");
  bnA.disabled = true;

  function writeToScreen(message) {
    if (message.length <= 0)
      return;
    console.log('writing: ' + message);
    output = document.getElementById("output");
    var pre = document.createElement("li");
    var html = ansi_up.ansi_to_html(message);
    pre.innerHTML = html;
    output.appendChild(pre);
    if (isScroll) {
      window.scrollBy(0, 100);
    }
  }

  function init() {
    tab("console_tab");

    // enable TAB input in textArea
    textArea.onkeydown = function(e) {
      if (e.keyCode == 9 || e.which == 9) {
          e.preventDefault();
          var s = this.selectionStart;
          this.value = this.value.substring(0, this.selectionStart) + "    " + this.value.substring(this.selectionEnd);
          this.selectionEnd = s + 4;
      }
    }

    websocket = new WebSocket(wsUri);
    websocket.binaryType = 'arraybuffer';

    websocket.onopen = function(evt) {
      writeToScreen("WS CONNECTED");
      websocket.send('a');  // dump RTC buffer command
      websocket.send('h');  // get heap command
    };

    websocket.onclose = function(evt) {
      connected_status.innerHTML = "‚ùå";
      writeToScreen("WS DISCONNECTED");
    };

    websocket.onmessage = function(evt) {
      dat = evt.data;

      console.log("dat: " + dat);

      if(typeof(dat) != "string") {
        dec = new TextDecoder("utf-8");
        dat = dec.decode(dat);
      }

      if (dat.startsWith('{"hello": ')) {
        temp = JSON.parse(dat);
        connected_status.innerHTML = "‚úÖ"
        host_name.innerHTML = temp["hello"];
      } else if (dat[0] == 'a') {
        temp_str = dat.substr(1).replace(/\0/g, '').replace("\r","");
        temp_str.split("\n").forEach(writeToScreen);
      } else if (dat[0] == 'h') {
        temp = JSON.parse(dat.substr(1));
        writeToScreen(dat.substr(1));
      } else if (dat[0] == 'b') {
        textArea.value = dat.slice(1);
        if (isWriting) {
          tStat.innerHTML = "<font color=#44FF44>üëç applied üëç</font>";
        }
      }
    };

    websocket.onerror = function(evt) {
      connected_status.innerHTML = "üî• " + evt.data;
      writeToScreen('ERROR: ' + evt.data);
    };

    window.onscroll = function() {
      var d = document.documentElement;
      isScroll = d.scrollTop + window.innerHeight === d.offsetHeight;
    };
  }

  // --------------------------------
  //  For the settings tab
  // --------------------------------

  function tab(n) {
    var x = document.getElementsByClassName("tab");
    for (i = 0; i < x.length; i++) {
      x[i].style.display = "none";
    }
    document.getElementById(n).style.display = "block";

    if (n == 'settings_tab')
      // dump current settings file
      websocket.send('b');
  }

  // For the settings tab
  var textArea, bnA, tStat;
  var isWriting = false;

  function writeFile() {
    bnA.disabled = true;
    websocket.send("b" + textArea.value);
    isWriting = true;
    textArea.value = "";
    tStat.innerHTML = "<font color=#444444>applying ...</font>";
  }

  function prettyPrint() {
      s = textArea.value;
      try {
        var obj = JSON.parse(s);
        textArea.value = JSON.stringify(obj, undefined, 4);
        bnA.disabled = false;
        tStat.innerHTML = "<font color=#44FF44>verified</font>";
      } catch(e) {
        bnA.disabled = true;
        var arr = e.message.match(/\d+/g);
        var row = parseInt(arr[0]);
        var col = parseInt(arr[1]);
        console.log('.json error at row / col: ', row, col);

        arr = textArea.value.split('\n');
        var startChar = 0;
        for (var i=0; i < row - 1; i++)
          startChar += arr[i].length + 1;
        startChar += col;

        textArea.focus();
        textArea.selectionStart = startChar;
        textArea.selectionEnd = startChar;
        tStat.innerHTML = "<font color=#FF4444>" + e.message + "</font>";
      }
  }

  window.onload = function() {
    window.setTimeout(init, 500);
  }

  window.onload = init();
</script>
</html>
